# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: Аналіз SonarCloud

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar-check:
    name: Перевірка SonarCloud
    runs-on: windows-latest

    steps:
      # 1️⃣ Клонування репозиторію
      - name: Завантаження коду
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # потрібно для правильної історії Git у Sonar

      # 2️⃣ Встановлення .NET SDK
      - name: Встановлення .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3️⃣ Початок аналізу SonarCloud
      - name: Початок аналізу SonarCloud
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
          dotnet sonarscanner begin `
            /k:"Rosarty_NetSdrClient1" `
            /o:"rosarty" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.projectBaseDir="D:\a\NetSdrClient1\NetSdrClient1" `
            /d:sonar.cs.opencover.reportsPaths="NetSdrClientAppTests/TestResults/coverage.opencover.xml" `
            /d:sonar.cpd.cs.minimumTokens=40 `
            /d:sonar.cpd.cs.minimumLines=5 `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/sonarcloud.yml" `
            /d:sonar.qualitygate.wait=true
        shell: pwsh

      # 4️⃣ Відновлення пакетів
      - name: Відновлення залежностей
        run: dotnet restore NetSdrClient.sln

      # 5️⃣ Збірка проєкту
      - name: Збірка
        run: dotnet build NetSdrClient.sln -c Release --no-restore

      # 6️⃣ Тестування з покриттям коду
      - name: Запуск тестів з покриттям
        run: |
          dotnet test NetSdrClientAppTests/NetSdrClientAppTests.csproj -c Release --no-build `
            /p:CollectCoverage=true `
            /p:CoverletOutput=NetSdrClientAppTests/TestResults/coverage.opencover.xml `
            /p:CoverletOutputFormat=opencover
        shell: pwsh

      # 7️⃣ Завантаження звіту (необов’язково)
      - name: Збереження звіту покриття
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: NetSdrClientAppTests/TestResults/coverage.opencover.xml

      # 8️⃣ Завершення аналізу SonarCloud
      - name: Завершення аналізу SonarCloud
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh
